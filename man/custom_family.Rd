% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/families.R
\name{custom_family}
\alias{custom_family}
\title{Custom Families in \pkg{brms} Models}
\usage{
custom_family(name, dpars = "mu", links = "identity", type = c("real",
  "int"), lb = NA, ub = NA, vars = NULL, env = parent.frame())
}
\arguments{
\item{name}{Name of the custom family.}

\item{dpars}{Names of the distributional parameters of
the family. One parameter must be named \code{"mu"}.}

\item{links}{Names of the link functions of the 
distributional parameters.}

\item{type}{Indicates if the response distribution is
continuous (\code{"real"}) or discrete (\code{"int"}).}

\item{lb}{Vector of lower bounds of the distributional 
parameters. Defaults to \code{NA} that is no lower bound.}

\item{ub}{Vector of upper bounds of the distributional 
parameters. Defaults to \code{NA} that is no upper bound.}

\item{vars}{Names of variables, which are part of the likelihood
function without being distributional parameters. That is,
\code{vars} can be used to pass data to the likelihood.}

\item{env}{An \code{environment} in which post-processing 
functions of the custom family for use in \code{\link{predict.brmsfit}}, 
\code{\link{fitted.brmsfit}} and \code{\link{log_lik}} can be found. 
Usually only relevant for package developers.}
}
\description{
Define custom families for use in \pkg{brms} models.
It allows users to benefit from the modeling flexibility of 
\pkg{brms}, while applying their own special likelihood
functions. All of the post-processing methods of \code{brmsfit} 
objects are compatible with custom families.
}
\details{
The corresponding probability density or4 mass \code{Stan} 
  functions need to have the exact same name as the custom family.
  That is if a family is called, say, \code{myfamily}, then the 
  \pkg{Stan} functions should be called \code{myfamily_lpdf} or
  \code{myfamily_lpmf} depending on whether it should define a 
  continuous or discrete distribution.
}
\examples{
\dontrun{
## demonstrate how to fit a beta-binomial model
## generate some fake data
phi <- 0.7
n <- 1000
z <- rnorm(n, sd<-0.2)
ntrials <- sample(1:10, n, replace = TRUE)
eta <- 1 + z
p.eta <- exp(eta) / (1 + exp(eta))
a <- p.eta * (1-phi) / phi
b <- (p.eta * phi - p.eta - phi + 1) / phi
p <- rbeta(n, a, b)
y <- rbinom(n, ntrials, p)
dat <- data.frame(y, z, ntrials)

# define a custom family
beta_binomial2 <- custom_family(
  "beta_binomial2", dpars = c("mu", "phi"),
  links = c("logit", "log"), lb = c(NA, 0),
  type = "int", vars = "trials[n]"
)

# define the corresponding Stan function
stan_funs <- "
  real beta_binomial2_lpmf(int y, real mu, real phi, int N) {
    return beta_binomial_lpmf(y | N, mu * phi, (1 - mu) * phi);
  }
"

# fit the model
fit <- brm(y | trials(ntrials) ~ z, data = dat, 
           family = beta_binomial2, stan_funs = stan_funs)
summary(fit)
}

}
\seealso{
See \code{\link{brmsfamily}} for a list of built in families.
}
